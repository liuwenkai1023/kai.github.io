<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>谷歌浏览器在插件UI出现颜色叠加显示异常的解决方案</title>
    <url>/categories/%E5%85%B6%E5%AE%83/202209291632-%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%A8%E6%8F%92%E4%BB%B6ui%E5%87%BA%E7%8E%B0%E9%A2%9C%E8%89%B2%E5%8F%A0%E5%8A%A0%E6%98%BE%E7%A4%BA%E5%BC%82%E5%B8%B8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</url>
    <content><![CDATA[<p>一般在虚拟机中打开Chrome可能会遇到这种情况，解决方案如下:</p>
<pre><code>1. 在谷歌浏览器地址栏输入 chrome://flags

2. 在打开的页面中搜索 Choose ANGLE graphics backend

3. 将Default改为OpenGL
</code></pre>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌浏览器安装后不显示翻译按钮解决方法</title>
    <url>/categories/%E5%85%B6%E5%AE%83/202208091638-%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85%E5%90%8E%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%BF%BB%E8%AF%91%E6%8C%89%E9%92%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html</url>
    <content><![CDATA[<p>安装Chrome谷歌浏览器后，不显示翻译按钮怎么办？解决方法如下:</p>
<pre><code>1. 打开任意一个网站

2. 在网站空白处点击鼠标右键

3. 选择翻译中文，此时浏览器就会出现翻译选项
</code></pre>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>在Cocos2dx-3.15中WSS的正确打开方式</title>
    <url>/categories/Cocos2dx/201711172301-%E5%9C%A8cocos2dx-3-15%E4%B8%ADwss%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>因为项目原因，需要对WebSocket通信进行加密(即使用wss协议)

虽然官方示例里虽然有wss相关的例子，但是代码和文档里面却没有对参数的进行详细的说明

导致在这个坑里浪费了一些时间，在这里记录一下
</code></pre>
<a id="more"></a>
<p>代码如下：</p>
<p>官方示例代码如下：<a href="https://github.com/cocos2d/cocos2d-x/blob/v3/tests/lua-tests/src/ExtensionTest/WebProxyTest.lua#L88" target="_blank" rel="noopener">也可点击链接查看更详细代码</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wsSendText &#x3D; cc.WebSocket:create(&quot;wss:&#x2F;&#x2F;echo.websocket.org&quot;, &#123;&quot;myprotocol_1&quot;, &quot;myprotocol_2&quot;&#125;, &quot;cacert.pem&quot;)</span><br></pre></td></tr></table></figure>
<p>看到这个示例代码，我当时是这样理解的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;wss:&#x2F;&#x2F;echo.websocket.org&quot;       -- 类型为string wss链接地址</span><br><span class="line">&#123;&quot;myprotocol_1&quot;, &quot;myprotocol_2&quot;&#125; -- 类型为table，里面是用户自定义协议名称</span><br><span class="line">&quot;cacert.pem&quot;                     -- 类型为string CA证书公钥地址</span><br></pre></td></tr></table></figure>
<p>所以有了下面这段代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- wss链接地址：wss:&#x2F;&#x2F;www.yygamesoft.com:8083</span><br><span class="line">-- 我们没有自定义协议，所以使用的是空table：&#123;&#125;</span><br><span class="line">-- 我们通过服务器生成的公钥：public.pem</span><br><span class="line">local sock &#x3D; cc.WebSocket:create(&quot;wss:&#x2F;&#x2F;www.yygamesoft.com:8083&quot;, &#123;&#125;, &quot;public.pem&quot;)</span><br></pre></td></tr></table></figure>

<p>然后就各种报错，大致错误信息就像下面一样：</p>
<pre><code>11-16 15:16:30.861: D/WebSocket.cpp(17297): scheme: wss, host: www.yygamesoft.com, port: 8082, path: 
11-16 15:16:30.861: D/WebSocket.cpp(17297): CA file (/data/data/org.cocos2dx.yynn/files/server.pem) in writable path exists!
11-16 15:16:30.871: D/WebSocket.cpp(17297): NOTICE: Creating Vhost &#39;default&#39; port -1, 1 protocols, IPv6 on
11-16 15:16:30.891: D/WebSocket.cpp(17297): WebSocket (0xb8d69640) Unhandled websocket event: 32
11-16 15:16:30.901: D/WebSocket.cpp(17297): WebSocket (0xb8d69640) Unhandled websocket event: 29
11-16 15:16:30.961: D/WebSocket.cpp(17297): ERR: SSL connect error 337047686: error:1416F086:SSL routines:tls_process_server_certificate:certificate verify failed
11-16 15:16:30.961: D/WebSocket.cpp(17297): WebSocket (0xb8d69640) onConnectionError, state: 0 ...
11-16 15:16:30.961: D/WebSocket.cpp(17297): WebSocket (0xb8d69640) onConnectionClosed, state: 2 ...
11-16 15:16:30.961: D/WebSocket.cpp(17297): onConnectionClosed, WebSocket (0xb8d69640) is closing by server.
11-16 15:16:30.971: D/WebSocket.cpp(17297): WebSocket (0xb8d69640) onConnectionClosed DONE!
11-16 15:16:30.971: D/WebSocket.cpp(17297): WebSocket (0xb8d69640) Unhandled websocket event: 45
11-16 15:16:30.971: D/WebSocket.cpp(17297): WebSocket (0xb8d69640) Unhandled websocket event: 33
11-16 15:16:30.981: D/cocos2d-x debug info(17297): [LUA-print] -&gt; wsSendTextError 
11-16 15:16:30.981: D/cocos2d-x debug info(17297): [LUA-print] -&gt; wsSendTextClose 
11-16 15:16:30.991: D/WebSocket.cpp(17297): WebSocket (0xb8d69640) onConnectionClosed, state: 3 ...
11-16 15:16:31.751: D/cocos2d-x debug info(17297): [LUA-print] -&gt;无法连接到服务器,请退出！！
</code></pre>
<p>错误信息表示是证书出了问题，无法通过服务器SSL验证。不管证书从服务器生成还是从浏览器导出都会报错，这就十分尴尬。当时论坛并搜不到关于这方面的解答，就只有在论坛发帖求助。所幸的是，折腾了大半天，还是找到了解决方案。</p>
<p>最终，解决方案就是不要使用自己的证书和自定义协议，使用默认的就行，感觉很嘲讽。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> -- 这里需要注意一下：cacert.pem文件需要手动复制到项目根目录中 </span><br><span class="line"> -- cacert.pem文件路径：引擎根目录&#x2F;tests&#x2F;cpp-tests&#x2F;Resources&#x2F;cacert.pem</span><br><span class="line">local socket &#x3D; cc.WebSocket:create(&quot;wss:&#x2F;&#x2F;www.yygamesoft.com:8083&quot;, &#123;&quot;myprotocol_1&quot;, &quot;myprotocol_2&quot;&#125;, &quot;cacert.pem&quot;)</span><br></pre></td></tr></table></figure>

<!-- 这个帖子提供了较大的帮助，有兴趣可以去看看.....

http://discuss.cocos2d-x.org/t/websocket-supports-ssl-connections/34611 -->

]]></content>
      <categories>
        <category>Cocos2dx</category>
      </categories>
      <tags>
        <tag>WSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CocosCreator中的微信小游戏分享</title>
    <url>/categories/Cocos-Creator/201810082122-cocoscreator%E4%B8%AD%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%88%86%E4%BA%AB.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>在论坛上看到有很多人问关于微信分享，加之公司叫把一款使用quick开发的游戏改微信小游戏也用到了分享

所以我就在这里分享一下如何使用，希望能对有需要的人产生一些帮助
</code></pre>
<h3 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h3><p>我们先来看一下最终效果…..</p>
<a id="more"></a>
<p><img src="https://forum.cocos.com/uploads/default/original/3X/c/d/cd385cf64dd0f7268b0b1585a7544284a665cd51.png" alt="image"></p>
<h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><h4 id="本地文件目录"><a href="#本地文件目录" class="headerlink" title="本地文件目录"></a>本地文件目录</h4><p>{项目目录}&#x2F;assets&#x2F;resources&#x2F;share&#x2F;</p>
<p><img src="https://forum.cocos.com/uploads/default/original/3X/a/b/ab4021bbd10d6d97b1cbf618d2efb67158fa8ce2.png" alt="image">、</p>
<h4 id="远程文件目录（建议整个res上传）"><a href="#远程文件目录（建议整个res上传）" class="headerlink" title="远程文件目录（建议整个res上传）"></a>远程文件目录（建议整个res上传）</h4><p>{远程服务器地址}&#x2F;res&#x2F;</p>
<p><img src="https://forum.cocos.com/uploads/default/original/3X/7/b/7be75f7153000a598fd42c78ebb92bece155cc9c.png" alt="image"></p>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test() &#123;</span><br><span class="line">    let title &#x3D; &quot;亲，您的智商已欠费，请充值。&quot;;</span><br><span class="line">    let fileName &#x3D; &quot;1.jpg&quot;</span><br><span class="line">    let message &#x3D; &#123;</span><br><span class="line">        title: &#96;$&#123;title&#125;&#96;,</span><br><span class="line">        imageUrl: this.getURL(&#96;resources&#x2F;share&#x2F;$&#123;fileName&#125;&#96;)</span><br><span class="line">    &#125;;</span><br><span class="line">    (&lt;any&gt;window).wx.shareAppMessage(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getURL(url) &#123;</span><br><span class="line">    url &#x3D; cc.url.raw(url);</span><br><span class="line">    if (cc.loader.md5Pipe) &#123;</span><br><span class="line">        url &#x3D; cc.loader.md5Pipe.transformURL(url);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        this.wx.getFileSystemManager().accessSync(url)</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        url &#x3D; window.wxDownloader.REMOTE_SERVER_ROOT + &quot;&#x2F;&quot; + url;</span><br><span class="line">    &#125;</span><br><span class="line">    return url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是不是感觉非常简单 :)</p>
]]></content>
      <categories>
        <category>Cocos Creator</category>
      </categories>
      <tags>
        <tag>微信分享</tag>
      </tags>
  </entry>
  <entry>
    <title>CocosCreator中的屏幕适配解决方案</title>
    <url>/categories/Cocos-Creator/201811122214-cocoscreator%E4%B8%AD%E7%9A%84%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><pre><code>之前总是看到很多同学在论坛上询问关于&quot;Cocos Creator&quot;屏幕适配相关的问题

这里简单说一下&quot;Cocos Creator 全屏幕适配&quot;

ps：文章中已附上demo，Cocos Creator版本为2.0.2
</code></pre>
<a id="more"></a>
<hr>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>其实利用好 <strong>Fit Width</strong> 和 <strong>Fit height</strong> 以及 <strong>cc.Widget组件</strong> 适配起来真的很简单。</p>
<p>对于设计为竖屏的游戏，采用<strong>Fit Width + cc.Widget</strong></p>
<p>对于设计为横屏的游戏，采用<strong>Fit Height + cc.Widget</strong></p>
<p>竖屏适配后大致效果如下：</p>
<blockquote>
<p><img src="https://forum.cocos.com/uploads/default/original/3X/a/0/a0c52cddaa5227a0893c27104104ffe9511118b4.png" alt="image"></p>
<p><img src="https://forum.cocos.com/uploads/default/original/3X/b/8/b828bbfeeda7d594c44c9cd96502a2c28e983c80.png" alt="image"></p>
<p><img src="https://forum.cocos.com/uploads/default/original/3X/9/9/9966b29b846e1c8f77b084d9312bfae08f4a4d4e.png" alt="image"></p>
</blockquote>
<p>文章写了又删了，感觉写得不怎样。还是附上demo实在一些，点这里下载<a href="https://forum.cocos.com/uploads/default/original/3X/e/3/e31458bab4c4b33b66ad6904d5b5d5e7bc157a15.zip" target="_blank" rel="noopener">demo.zip</a> 。</p>
]]></content>
      <categories>
        <category>Cocos Creator</category>
      </categories>
      <tags>
        <tag>屏幕适配</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab查看管理员默认密码</title>
    <url>/categories/Gitlab/202212151400-gitlab%E6%9F%A5%E7%9C%8B%E7%AE%A1%E7%90%86%E5%91%98%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81.html</url>
    <content><![CDATA[<h3 id="gitlab-ce-安装默认密码"><a href="#gitlab-ce-安装默认密码" class="headerlink" title="gitlab-ce 安装默认密码"></a>gitlab-ce 安装默认密码</h3><p>gitlab-ce 安装以后会生成一个临时文件存放密码</p>
<p><strong>临时文件路径 &#x2F;etc&#x2F;gitlab&#x2F;initial_root_password</strong></p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># WARNING:此值仅在以下条件下有效</span><br><span class="line">#   1.如果手动提供(通过&#39;GITLAB_ROOT_PASSWORD&#39;环境变量或通过&#39;gitlab_rails[&#39;initial_root_password&#39;]&#39;设置在&#39;gitlab.rb&#39;，它是在第一次种子数据库(通常是第一次重新配置运行)之前提供的。</span><br><span class="line">#   2.密码没有手动更改，无论是通过UI或通过命令行。</span><br><span class="line">#</span><br><span class="line"># 如果这里显示的密码不起作用，您必须重置你的admin密码：</span><br><span class="line">#</span><br><span class="line"># https:&#x2F;&#x2F;docs.gitlab.com&#x2F;ee&#x2F;security&#x2F;reset_user_password.html#reset-your-root-password</span><br><span class="line"></span><br><span class="line">密码:TVYZOOVpNYhuQBFzqIR+zgTFVIVkuGwdCuuw4qgo8qA&#x3D;</span><br><span class="line"></span><br><span class="line">注意:该文件将在24小时后的第一次重新配置运行中自动删除。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Gitlab</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>论CocosCreator中的流体模拟的几种方案</title>
    <url>/categories/Cocos-Creator/201905081426-%E8%AE%BAcocoscreator%E4%B8%AD%E7%9A%84%E6%B5%81%E4%BD%93%E6%A8%A1%E6%8B%9F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>之前试玩“HappyGlass”这款游戏，整体感觉还不错，而且实现也应该比较简单。

刚好最近我手上事情不多，思考了一下Creator里的流体该如何模拟。文末附上demo。
</code></pre>
<a id="more"></a>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://forum.cocos.com/uploads/default/original/3X/f/7/f7d35f4e6ec858fc02750ed2d02ac20cbbb8cef9.gif" alt="效果图"></p>
<h3 id="物理系统的使用"><a href="#物理系统的使用" class="headerlink" title="物理系统的使用"></a>物理系统的使用</h3><p>物理系统：box2d</p>
<p>物理组件：主要通过cc.PhysicsCircleCollider来模拟流体的运动</p>
<h3 id="流体的几种模拟渲染方案"><a href="#流体的几种模拟渲染方案" class="headerlink" title="流体的几种模拟渲染方案"></a>流体的几种模拟渲染方案</h3><ol>
<li><p>使用Shader进行场强叠加计算并渲染（shader计算量大，低端机太卡）</p>
</li>
<li><p>单纯利用Blend来模拟场强的叠加（低端机勉强可以跑50fps，颜色叠加后只能用黑色背景，无法进行商用）</p>
</li>
<li><p>一个综合的处理方式，步骤如下：（低端机勉强可以跑40-45fps，没有任何”后遗症”）</p>
<ol>
<li>利用Blend模拟场强叠加后，使用单独的Camera进行渲染并输出到RenderTexture</li>
<li>利用这个RenderTexture创建一个SpriteFrame。</li>
<li>利用这个SpriteFrame显示在Sprite上</li>
<li>使用shader或者Mask组件对这个Sprite显示的内容进行裁剪</li>
<li>在Mask和shader之间我选择了使用shader来进行裁剪（Mask裁剪精度太低）</li>
</ol>
</li>
</ol>
<p>PS1: 场强值已经被我转换成带有透明度的纯色图片,所有才会有2和3。</p>
<p>PS2: 这里低端机指的是 <strong>红米1s</strong></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p> Metaballs and WebGL: <a href="http://jamie-wong.com/2016/07/06/metaballs-and-webgl/" target="_blank" rel="noopener">++链接地址++</a>，它详细的讲述了如何使用WebGL来渲染Metaballs。</p>
<h3 id="Demo下载地址"><a href="#Demo下载地址" class="headerlink" title="Demo下载地址"></a>Demo下载地址</h3><p>demo里我没有上传第二种实现方式 </p>
<p><a href="https://forum.cocos.com/uploads/default/original/3X/3/6/368ca1ea9c518194aca709fadd44e31856b3f37d.zip" target="_blank" rel="noopener">++demo下载地址++</a>     <a href="https://github.com/liuwenkai1023/ccc-fluid-demo" target="_blank" rel="noopener">++git仓库地址++</a></p>
]]></content>
      <categories>
        <category>Cocos Creator</category>
      </categories>
      <tags>
        <tag>流体模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab通过Rails控制台重置账户密码</title>
    <url>/categories/Gitlab/202212151400-gitlab%E9%80%9A%E8%BF%87rails%E6%8E%A7%E5%88%B6%E5%8F%B0%E9%87%8D%E7%BD%AE%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81.html</url>
    <content><![CDATA[<pre><code>记一次Gitlab忘记了管理员密码后，重置管理员账号的流程。
</code></pre>
<h3 id="1-打开Rails-控制台"><a href="#1-打开Rails-控制台" class="headerlink" title="1. 打开Rails 控制台"></a>1. 打开Rails 控制台</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab-rails console -e production</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="2-查找用户"><a href="#2-查找用户" class="headerlink" title="2. 查找用户"></a>2. 查找用户</h3><ol>
<li><p>通过用户名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 管理员账户 @username root</span><br><span class="line">user &#x3D; User.find_by_username &#39;root&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过用户ID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 管理员账户 @id 1</span><br><span class="line"># user &#x3D; User.where(id: 1).first</span><br><span class="line">user &#x3D; User.find(1)</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过电子邮件地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user &#x3D; User.find_by(email: &#39;user@example.com&#39;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-重置密码"><a href="#3-重置密码" class="headerlink" title="3. 重置密码"></a>3. 重置密码</h3><p>++<strong>注意</strong>: 必须同时更改password和password_confirmation！++</p>
<ol>
<li><p>为新密码设置一个新的随机值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new_password &#x3D; ::User.random_password</span><br><span class="line">user.password &#x3D; new_password</span><br><span class="line">user.password_confirmation &#x3D; new_password</span><br></pre></td></tr></table></figure>
</li>
<li><p>要为新密码设置特定值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new_password &#x3D; &#39;your_password&#39;</span><br><span class="line">user.password &#x3D; new_password</span><br><span class="line">user.password_confirmation &#x3D; new_password</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-保存更改"><a href="#4-保存更改" class="headerlink" title="4. 保存更改"></a>4. 保存更改</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user.save!</span><br></pre></td></tr></table></figure>


<h3 id="5-退出控制台"><a href="#5-退出控制台" class="headerlink" title="5. 退出控制台"></a>5. 退出控制台</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<!-- 传送门 [Gitlab官方文档](https://docs.gitlab.com/ee/security/reset_user_password.html) -->]]></content>
      <categories>
        <category>Gitlab</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS-arm64 but attempting to link with file built for unknown-unsupported file</title>
    <url>/categories/%E5%85%B6%E5%AE%83/202209021314-ios-arm64-but-attempting-to-link-with-file-built-for-unknown-unsupported-file.html</url>
    <content><![CDATA[<pre><code>记一次iOS上踩到的坑，替换修复bug后的sdk后无法编译通过，最后发现是没有使用git lfs pull的锅。
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Undefined symbols <span class="keyword">for</span> architecture arm64:</span><br><span class="line">file built <span class="keyword">for</span> unknown-unsupported file format (0x56 0x65 0x72 0x73 0x69 0x6F 0x6E 0x73 0x2F 0x43 0x75 0x72 0x72 0x65 0x6E 0x74)</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ld: warning: ignoring file /Volumes/Data/c1/ios/ios_xmjz/HLSDK/AppsFlyerLib.framework/AppsFlyerLib, building <span class="keyword">for</span> iOS-arm64 but attempting to link with file built <span class="keyword">for</span> unknown-unsupported file format ( 0x56 0x65 0x72 0x73 0x69 0x6F 0x6E 0x73 0x2F 0x43 0x75 0x72 0x72 0x65 0x6E 0x74 )</span><br><span class="line">ld: warning: arm64 <span class="keyword">function</span> not 4-byte aligned: _unwind_tester from /Volumes/Data/c1/ios/ios_xmjz/Libraries/libiPhone-lib.a(unwind_test_arm64.o)</span><br><span class="line">ld: warning: Could not find or use auto-linked framework <span class="string">'FBLPromises'</span></span><br><span class="line">Undefined symbols <span class="keyword">for</span> architecture arm64:</span><br><span class="line">  <span class="string">"_OBJC_CLASS_<span class="variable">$_AppsFlyerLib</span>"</span>, referenced from:</span><br><span class="line">      objc-class-ref <span class="keyword">in</span> HLSDKFramework(HLAppsFlyerTracker.o)</span><br><span class="line">      objc-class-ref <span class="keyword">in</span> HLSDKFramework(HLGameService.o)</span><br><span class="line">ld: symbol(s) not found <span class="keyword">for</span> architecture arm64</span><br><span class="line">clang: error: linker <span class="built_in">command</span> failed with <span class="built_in">exit</span> code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure>

<p>通过对比md5发现，文件发生了变化，替换正常文件即可！</p>
<p>一般情况是使用了git lfs，但拉取时没有使用git lfs pull。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 报错的库 md5</span></span><br><span class="line">$ md5 AppsFlyerLib.framework/AppsFlyerLib</span><br><span class="line">MD5 (AppsFlyerLib.framework/AppsFlyerLib) = 81ee2da297f93f84336c607e388903f9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常的库 md5</span></span><br><span class="line">$ md5 AppsFlyerLib.framework/AppsFlyerLib</span><br><span class="line">MD5 (AppsFlyerLib.framework/AppsFlyerLib) = 029b7caa1b69ffcd20b9807d98a07afb</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Github Pages和Hexo搭建个人博客</title>
    <url>/categories/%E5%85%B6%E5%AE%83/201710231314-%E4%BD%BF%E7%94%A8github-pages%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><pre><code>时间不会停留，时间会冲淡你的记忆；

时间会不断更新你的记忆，不需要刻意的去忘与遗忘；

那些念念不忘的事情就在我们念念不忘之中，消失在时间的某个角落。
</code></pre>
<a id="more"></a>
<p>你有这样的经历吗？<br>踩过的坑，时间久了也会忘记。<br>当再次遇到时，有印象，但一时会想不起。<br>所以，我想让一种媒介来帮我记住它们。想想，个人博客不正是这个媒介吗?</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>一个<a href="https://github.com/" target="_blank" rel="noopener">Github</a>账号</p>
<p>安装<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">NodeJs</a></p>
<p>安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a></p>
<h2 id="开始使用Github-Pages"><a href="#开始使用Github-Pages" class="headerlink" title="开始使用Github Pages"></a>开始使用Github Pages</h2><h3 id="在Github上新建仓库"><a href="#在Github上新建仓库" class="headerlink" title="在Github上新建仓库"></a>在Github上新建仓库</h3><p>仓库名：[username].github.io</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">注意：为了方便，请选择Public &amp;&amp; 勾选Initialize this repository with a README</span><br></pre></td></tr></table></figure>

<h3 id="进入仓库进行配置"><a href="#进入仓库进行配置" class="headerlink" title="进入仓库进行配置"></a>进入仓库进行配置</h3><p> 选择Settings-&gt;Github Pages，并将sources选项选为master branch。 设置成功后会显示：</p>
<pre><code>&quot;Your site is published at http://&lt;username&gt;.github.io/&quot;
</code></pre>
<p>关于Github Pages的配置到这里就结束了，接下来看Hexo。</p>
<h2 id="安装Hexo-cli并开始使用"><a href="#安装Hexo-cli并开始使用" class="headerlink" title="安装Hexo-cli并开始使用"></a>安装Hexo-cli并开始使用</h2><h3 id="使用npm安装hexo-cli，并初始化hexo工程"><a href="#使用npm安装hexo-cli，并初始化hexo工程" class="headerlink" title="使用npm安装hexo-cli，并初始化hexo工程"></a>使用npm安装hexo-cli，并初始化hexo工程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli   <span class="comment">#安装hexo-cli</span></span><br><span class="line">$ hexo init &lt;project-name&gt;  <span class="comment">#创建一个新的hexo工程并进入</span></span><br></pre></td></tr></table></figure>

<h3 id="使用hexo新建工程，并在本地启动"><a href="#使用hexo新建工程，并在本地启动" class="headerlink" title="使用hexo新建工程，并在本地启动"></a>使用hexo新建工程，并在本地启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;project-name&gt;         <span class="comment">#进入到工程目录         </span></span><br><span class="line">$ hexo new &lt;post-name&gt;      <span class="comment">#新建一个帖子，你可以往生成好的帖子里添加内容试试。帖子所在的目录为：&lt;project-name&gt;/source/_posts</span></span><br><span class="line">$ hexo clean                <span class="comment">#清除本地站点缓存(可选，一般切换主题后会使用)</span></span><br><span class="line">$ hexo g                    <span class="comment">#生成静态站点</span></span><br><span class="line">$ hexo s                    <span class="comment">#开启本地服务器（默认4000端口）</span></span><br></pre></td></tr></table></figure>
<p>服务器启动成功后，你可以试着预览一下。<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a></p>
<h2 id="部署静态站点到Github-Pages"><a href="#部署静态站点到Github-Pages" class="headerlink" title="部署静态站点到Github Pages"></a>部署静态站点到Github Pages</h2><h3 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a>安装 hexo-deployer-git</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="修改config-yml配置"><a href="#修改config-yml配置" class="headerlink" title="修改config.yml配置"></a>修改config.yml配置</h3><p>在config.yml末尾追加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt;    <span class="comment">#git仓库地址</span></span><br><span class="line">  branch: [branch]          <span class="comment">#需要推送到哪个分支，一般配置为master</span></span><br><span class="line"><span class="comment">#  message: [message]        #自定义推送的信息（可选，默认为 Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;）</span></span><br></pre></td></tr></table></figure>

<h3 id="部署到Github-Pages"><a href="#部署到Github-Pages" class="headerlink" title="部署到Github Pages"></a>部署到Github Pages</h3><p>这个操作会将本地生成的静态站推送到你所配置的仓库中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>至此，部署完成。访问 http:&#x2F;&#x2F;[username].github.io&#x2F;</p>
<p>当然，现在使用的是Hexo默认主题，有点丑。可以到<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题商店</a>去选择一款你喜欢的吧。个人推荐<a href="https://theme-next.org/" target="_blank" rel="noopener">nexT</a>主题。</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>如何迁移windows用户目录</title>
    <url>/categories/%E5%85%B6%E5%AE%83/202208170000-%E5%A6%82%E4%BD%95%E8%BF%81%E7%A7%BBwindows%E7%94%A8%E6%88%B7%E7%9B%AE%E5%BD%95.html</url>
    <content><![CDATA[<h2 id="如何迁移windows用户目录"><a href="#如何迁移windows用户目录" class="headerlink" title="如何迁移windows用户目录"></a>如何迁移windows用户目录</h2><p><strong>1、进入PE系统</strong></p>
<p><em>&#x3D;&#x3D;不会还有人不会进PE吧&#x3D;&#x3D;。:(</em></p>
<p>下载一个微PE（<a href="https://www.wepe.com.cn/download.html" target="_blank" rel="noopener">下载地址</a>），双击运行安装，选择 &#x3D;&#x3D;立即安装进系统&#x3D;&#x3D;。<br>重启会自动进入系统选择页面，选择微PE系统进入即可。</p>
<a id="more"></a>
<p><strong>2、拷贝Users目录到到你需要迁到的位置</strong></p>
<p>当然，如果你想只拷贝Users下的一个用户也是可以的哦，流程是一致的哈。</p>
<p><strong>3、拷贝完成后，删除C盘中的Users目录</strong></p>
<p><strong>4、为Users目录创建一个符号链接（注意盘符一定要匹配）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># C:\Users =&gt; D:\Users</span></span><br><span class="line">mklink /D /J C:\Users D:\Users</span><br></pre></td></tr></table></figure>
<p><strong>5、重启电脑</strong></p>
<p>如果此时你的电脑正常进入了桌面，那么恭喜你，已经完成的用户目录的迁移。</p>
<p><em>&#x3D;&#x3D;如果你的电脑为你创建了临时用户，那么也恭喜你，又可以学到新的知识了，请继续往下看吧。&#x3D;&#x3D;</em></p>
<h2 id="如何完美解决windows出现临时用户问题"><a href="#如何完美解决windows出现临时用户问题" class="headerlink" title="如何完美解决windows出现临时用户问题"></a>如何完美解决windows出现临时用户问题</h2><p><strong>1、备份你的用户文件夹（如果它还在的话）</strong></p>
<p>建议直接修改Users下的用户名，这样速度快一些。当然你也可以复制一份出来。 :(</p>
<p><strong>2、win+R输入regedit打开注册表</strong><br><img src="http://cdn.liuwenkai.cn/pictures/picgo/8892fadb84fad408e24ce9bf00ab85d2.png" alt="image.png"></p>
<p><strong>3、打开注册表后找到找到这个键值</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList</span><br></pre></td></tr></table></figure>

<p><strong>4、直接删掉最长的几项（注意别删错了）</strong><br><img src="http://cdn.liuwenkai.cn/pictures/picgo/1e8747db87aee1abb3bd92efc5e22481.png" alt="image.png"></p>
<p><strong>5、再次重启计算机</strong></p>
<p>此时系统就正常进入桌面，并在Users下自动创建对应用户的文件夹。</p>
<p>如果前面有备份的话，将《备份的用户文件夹内容》移动进《系统创建的用户文件夹》覆盖即可，别问为什么是移动不是复制，问就是快。</p>
<p><strong>6、再次重启计算机</strong></p>
<p>没问题，完美！！！!</p>
<p><img src="http://cdn.liuwenkai.cn/pictures/picgo/f2c4575f24dcb8a2ba1ccf0da96a208e.gif" alt="image.gif"> </p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
